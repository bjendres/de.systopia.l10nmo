<?php
/*-------------------------------------------------------+
| L10n Profiling Extension                               |
| Copyright (C) 2019 SYSTOPIA                            |
| Author: B. Endres (endres@systopia.de)                 |
+--------------------------------------------------------+
| This program is released as free software under the    |
| Affero GPL license. You can redistribute it and/or     |
| modify it under the terms of this license which you    |
| can read by viewing the included agpl.txt or online    |
| at www.gnu.org/licenses/agpl.html. Removal of this     |
| copyright header is strictly prohibited without        |
| written permission from the original author(s).        |
+--------------------------------------------------------*/

use CRM_L10nmo_ExtensionUtil as E;

/**
 * MO file generator
 */
class CRM_L10nmo_Form_Generator extends CRM_Core_Form {
  public function buildQuickForm() {

    // add form elements
    $this->add(
      'select',
      'type',
      E::ts('File Type'),
      [
          'pot' => E::ts("PO Template (.pot)"),
          'po'  => E::ts("PO File (.po)"),
      ],
      TRUE
    );

    $this->add(
        'select',
        'domain',
        E::ts('Domain'),
        [
            'civicrm-option' => E::ts("CiviCRM Options"),
            'civicrm-data'   => E::ts("CiviCRM User Data"),
        ],
        TRUE
    );

    $this->add(
        'select',
        'language',
        E::ts('Language'),
        CRM_Core_I18n::languages(),
        FALSE
    );

    $this->addButtons([
      [
          'type'      => 'submit',
          'name'      => E::ts('Generate File'),
          'isDefault' => TRUE,
      ],
    ]);

    // export form elements
    $this->setDefaults([
        'language' => CRM_Core_I18n::getLocale(),
    ]);

    parent::buildQuickForm();
  }

  public function postProcess() {
    $values = $this->exportValues();

    // simple file generation
    switch ($values['domain']) {
      case 'civicrm-option':
        $this->generateOptionFile($values['type'] == 'pot', $values['language'], TRUE);
        break;

      case 'civicrm-data':
        $this->generateDataFile($values['type'] == 'pot', $values['language'], TRUE);
        break;

      default:
        CRM_Core_Session::setStatus("Please select a domain!", "Error", 'error');
    }

    parent::postProcess();
  }

  /**
   * Generate a option group PO or POT file
   *
   * @param $as_template boolean POT file?
   * @param $locale      string locale
   * @param $download    boolean TRUE if should be offered for download
   */
  protected function generateOptionFile($as_template, $locale, $download) {
    $i18n = new CRM_L10nx_I18n($locale);
    $group_list = CRM_L10nx_Configuration::getGroupList();
    // TODO: add remaining (unmapped) option groups?

    // generate data
    $po_data  = "# File generated by de.systopia.l10nmo extension.\n";
    $po_data .= "# See https://github.com/systopia/de.systopia.l10nmo\n";
    $po_data .= "msgid \"\"\n";
    $po_data .= "msgstr \"\"\n";
    $po_data .= "\"Project-Id-Version: FIXME\\n\"\n";
    $po_data .= "\"MIME-Version: 1.0\\n\"\n";
    $po_data .= "\"Content-Type: text/plain; charset=UTF-8\\n\"\n";
    $po_data .= "\"Content-Transfer-Encoding: 8bit\\n\"\n";

    if ($as_template) {
      $po_data .= "\"POT-Creation-Date: " . date('Y-m-d H:iT00') . "\\n\"\n";
    } else {
      $po_data .= "\"PO-Creation-Date: " . date('Y-m-d H:iT00') . "\\n\"\n";
      $po_data .= "\"Last-Translator: FIXME <email@fix.me>\\n\"\n";
      $po_data .= "\"Language-Team: FIXME <email@fix.me>\\n\"\n";
      $po_data .= "\"Language: {$locale}\\n\"\n";
    }

    // add the data
    foreach ($group_list as $group) {
      $strings = $this->getGroupStrings($group);
      foreach ($strings as $string) {
        // write context?
        //$po_data  .= "msgctxt \"{$context}\"\n";

        // write original
        $original_encoded = $this->po_encode_string($string);
        $po_data  .= "msgid \"{$original_encoded}\"\n";

        // write translation
        if ($as_template) {
          $po_data  .= "msgstr \"\"\n";
        } else {
          // get current translation
          $translation = $i18n->ts($string, ['domain' => 'civicrm-option']);
          $translation_encoded = $this->po_encode_string($translation);
          $po_data  .= "msgstr \"{$translation_encoded}\"\n";
        }
      }
    }

    if ($download) {
      $file_name = $as_template ? 'civicrm-options.pot' : 'civicrm-options.po';
      CRM_Utils_System::download($file_name, 'text/x-gettext-translation', $po_data);
    } else {
      return $po_data;
    }
  }


  /**
   * Generate a PO or POT file with the system data
   *
   * @param $as_template boolean POT file?
   * @param $locale      string locale
   * @param $download    boolean TRUE if should be offered for download
   */
  protected function generateDataFile($as_template, $locale, $download) {
    $i18n = new CRM_L10nx_I18n($locale);
    $translatable_columns = CRM_Core_I18n_SchemaStructure::columns();

    // generate data
    $po_data  = "# File generated by de.systopia.l10nmo extension.\n";
    $po_data .= "# See https://github.com/systopia/de.systopia.l10nmo\n";
    $po_data .= "msgid \"\"\n";
    $po_data .= "msgstr \"\"\n";
    $po_data .= "\"Project-Id-Version: FIXME\\n\"\n";
    $po_data .= "\"MIME-Version: 1.0\\n\"\n";
    $po_data .= "\"Content-Type: text/plain; charset=UTF-8\\n\"\n";
    $po_data .= "\"Content-Transfer-Encoding: 8bit\\n\"\n";

    if ($as_template) {
      $po_data .= "\"POT-Creation-Date: " . date('Y-m-d H:iT00') . "\\n\"\n";
    } else {
      $po_data .= "\"PO-Creation-Date: " . date('Y-m-d H:iT00') . "\\n\"\n";
      $po_data .= "\"Last-Translator: FIXME <email@fix.me>\\n\"\n";
      $po_data .= "\"Language-Team: FIXME <email@fix.me>\\n\"\n";
      $po_data .= "\"Language: {$locale}\\n\"\n";
    }

    // add the data
    foreach ($translatable_columns as $table_name => $fields) {
      $strings = $this->getDataStrings($table_name, $fields);
      foreach ($strings as $string) {
        // write context?
        //$po_data  .= "msgctxt \"{$context}\"\n";

        // write original
        $original_encoded = $this->po_encode_string($string);
        $po_data  .= "msgid \"{$original_encoded}\"\n";

        // write translation
        if ($as_template) {
          $po_data  .= "msgstr \"\"\n";
        } else {
          // get current translation
          $translation = $i18n->ts($string, ['domain' => 'civicrm-data']);
          $translation_encoded = $this->po_encode_string($translation);
          $po_data  .= "msgstr \"{$translation_encoded}\"\n";
        }
      }
    }

    if ($download) {
      $file_name = $as_template ? 'civicrm-data.pot' : 'civicrm-data.po';
      CRM_Utils_System::download($file_name, 'text/x-gettext-translation', $po_data);
    } else {
      return $po_data;
    }
  }


  /**
   * Get all strings from the given group
   *
   * @param $group_spec string either a group name or a field spec
   */
  protected function getGroupStrings($group_spec) {
    $strings = [];
    if (strstr($group_spec, '__')) {
      // this is a DB field specification
      list($table_name, $field_name) = explode('__', $group_spec);
      $data = CRM_Core_DAO::executeQuery("SELECT DISTINCT({$field_name}) AS value FROM {$table_name}");
      while ($data->fetch()) {
        $strings[] = $data->value;
      }
      $data->free();

    } else {
      // this should be an option group
      $query = civicrm_api3('OptionValue', 'get', [
          'option.limit'    => 0,
          'option_group_id' => $group_spec,
          'return'          => 'label',
      ]);
      foreach ($query['values'] as $option_value) {
        $strings[] = $option_value['label'];
      }
    }

    return $strings;
  }

  /**
   * Get all strings from the given table/field spec
   *
   * @param $table_name string table name
   * @param $fields     array  fields
   */
  protected function getDataStrings($table_name, $fields) {
    $strings = [];
    foreach ($fields as $field_name => $field_type) {
      $data = CRM_Core_DAO::executeQuery("SELECT DISTINCT({$field_name}) AS value FROM {$table_name}");
      while ($data->fetch()) {
        $strings[] = $data->value;
      }
    }

    return $strings;
  }
  /**
   * Encode string to be used in PO/POT files
   * @param $string string string to be translationn
   * @return string
   */
  protected function po_encode_string($string) {
    return str_replace('"', '\"', $string);
  }
}
